/* DO NOT EDIT THIS FILE */
/*
 *  Copyright (C) 2002  James Antill
 *  
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *   
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *   
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 *  email: james@and.org
 */
/* functions which are inlined */
/* NOTE: this implementation can change when the ABI changes ... DO NOT use
 * undocumented knowledge from here */

#ifdef VSTR_AUTOCONF_USE_WRAP_MEMCPY
extern inline void *vstr_wrap_memcpy(void *dest, const void *src, size_t n)
{
  switch (n)
  {
    case 7:  ((unsigned char *)dest)[6] = ((const unsigned char *)src)[6];
    case 6:  ((unsigned char *)dest)[5] = ((const unsigned char *)src)[5];
    case 5:  ((unsigned char *)dest)[4] = ((const unsigned char *)src)[4];
    case 4:  ((unsigned char *)dest)[3] = ((const unsigned char *)src)[3];
    case 3:  ((unsigned char *)dest)[2] = ((const unsigned char *)src)[2];
    case 2:  ((unsigned char *)dest)[1] = ((const unsigned char *)src)[1];
    case 1:  ((unsigned char *)dest)[0] = ((const unsigned char *)src)[0];
      break;
    default: memcpy(dest, src, n);
      break;
  }
  
  return (dest);
}
#else
# define vstr_wrap_memcpy(x, y, z)  memcpy(x, y, z)
#endif

#ifdef VSTR_AUTOCONF_USE_WRAP_MEMCMP
extern inline int vstr_wrap_memcmp(const void *passed_s1,
                                       const void *passed_s2, size_t n)
{
  const unsigned char *s1 = passed_s1;
  const unsigned char *s2 = passed_s2;
  int ret = 0;
  int tmp = 0;

  switch (n)
  {
    case 7:  tmp = s1[6] - s2[6]; if (tmp) ret = tmp;
    case 6:  tmp = s1[5] - s2[5]; if (tmp) ret = tmp;
    case 5:  tmp = s1[4] - s2[4]; if (tmp) ret = tmp;
    case 4:  tmp = s1[3] - s2[3]; if (tmp) ret = tmp;
    case 3:  tmp = s1[2] - s2[2]; if (tmp) ret = tmp;
    case 2:  tmp = s1[1] - s2[1]; if (tmp) ret = tmp;
    case 1:  tmp = s1[0] - s2[0]; if (tmp) ret = tmp;
      break;
    default: ret = memcmp(s1, s2, n);
      break;
  }
  
  return (ret);
}
#else
# define vstr_wrap_memcmp(x, y, z)  memcmp(x, y, z)
#endif

#ifdef VSTR_AUTOCONF_USE_WRAP_MEMCHR
extern inline void *vstr_wrap_memchr(const void *passed_s1, int c, size_t n)
{
  const unsigned char *s1 = passed_s1;
  const void *ret = 0;
  int tmp = 0;

  switch (n)
  {
    case 7:  tmp = s1[6] == c; if (tmp) ret = s1 + 6;
    case 6:  tmp = s1[5] == c; if (tmp) ret = s1 + 5;
    case 5:  tmp = s1[4] == c; if (tmp) ret = s1 + 4;
    case 4:  tmp = s1[3] == c; if (tmp) ret = s1 + 3;
    case 3:  tmp = s1[2] == c; if (tmp) ret = s1 + 2;
    case 2:  tmp = s1[1] == c; if (tmp) ret = s1 + 1;
    case 1:  tmp = s1[0] == c; if (tmp) ret = s1 + 0;
      break;
    default: ret = memchr(s1, c, n);
      break;
  }
  
  return ((void *)ret);
}
#else
# define vstr_wrap_memchr(x, y, z)  memchr(x, y, z)
#endif

#ifdef VSTR_AUTOCONF_USE_WRAP_MEMSET
extern inline void *vstr_wrap_memset(void *dest, int c, size_t n)
{
  switch (n)
  {
    case 7:  ((unsigned char *)dest)[6] = c;
    case 6:  ((unsigned char *)dest)[5] = c;
    case 5:  ((unsigned char *)dest)[4] = c;
    case 4:  ((unsigned char *)dest)[3] = c;
    case 3:  ((unsigned char *)dest)[2] = c;
    case 2:  ((unsigned char *)dest)[1] = c;
    case 1:  ((unsigned char *)dest)[0] = c;
      break;
    default: memset(dest, c, n);
      break;
  }
  
  return (dest);
}
#else
# define vstr_wrap_memset(x, y, z)  memset(x, y, z)
#endif

#ifdef VSTR_AUTOCONF_USE_WRAP_MEMMOVE
extern inline void *vstr_wrap_memmove(void *dest, const void *src, size_t n)
{
  if (n < 8)
  {
    unsigned char tmp[8];
    vstr_wrap_memcpy(tmp,  src, n);
    vstr_wrap_memcpy(dest, tmp, n);
    return (dest);
  }

  return memmove(dest, src, n);
}
#else
# define vstr_wrap_memmove(x, y, z) memmove(x, y, z)
#endif

/* needed at the top so vstr_del() etc. can use it */
extern inline void vstr_ref_del(struct Vstr_ref *tmp)
{
  if (!tmp)
    return; /* std. free semantics */
  
  if (!--tmp->ref)
    (*tmp->func)(tmp);
}

extern inline struct Vstr_ref *vstr_ref_add(struct Vstr_ref *tmp)
{
  ++tmp->ref;
  
  return (tmp);
}

extern inline void *vstr_cache_get(const struct Vstr_base *base,
                                   unsigned int pos)
{
  if (!pos)
    return ((void *)0);

  if (!base->cache_available || !VSTR__CACHE(base))
    return ((void *)0);
  
  --pos;
  
  if (pos >= VSTR__CACHE(base)->sz)
    return ((void *)0);
  
  return (VSTR__CACHE(base)->data[pos]);
}

extern inline int vstr_add_buf(struct Vstr_base *base, size_t pos,
                               const void *buffer, size_t len)
{
  if (!len) return (1);

  if (base->len && (pos == base->len) &&
      (base->end->type == VSTR_TYPE_NODE_BUF) &&
      (len <= (base->conf->buf_sz - base->end->len)) &&
      (!base->cache_available || base->cache_internal))
  {
    struct Vstr_node *scan = base->end;

    vstr_wrap_memcpy(((struct Vstr_node_buf *)scan)->buf + scan->len, buffer, len);
    scan->len += len;
    base->len += len;

    if (base->iovec_upto_date)
    {
      unsigned int num = base->num + VSTR__CACHE(base)->vec->off - 1;
      VSTR__CACHE(base)->vec->v[num].iov_len += len;
    }
    
    return (1);
  }

  return (vstr_extern_inline_add_buf(base, pos, buffer, len));
}

extern inline int vstr_del(struct Vstr_base *base, size_t pos, size_t len)
{
  if (!len)
    return (1);

  if (pos > base->len)
    return (0);

  if ((pos == 1) && ((len + base->used) < base->beg->len) &&
      (!base->cache_available || base->cache_internal))
  {
    struct Vstr_node *scan = base->beg;
    void *data = (void *)0;

    base->len -= len;
    
    switch (scan->type)
    {
      case VSTR_TYPE_NODE_BUF:
        base->used += len;
        break;
      case VSTR_TYPE_NODE_NON:
        scan->len -= len;
        break;
      case VSTR_TYPE_NODE_PTR:
      {
        char *tmp = ((struct Vstr_node_ptr *)scan)->ptr;
        ((struct Vstr_node_ptr *)scan)->ptr = tmp + len;
        scan->len -= len;
      }
      break;
      case VSTR_TYPE_NODE_REF:
        ((struct Vstr_node_ref *)scan)->off += len;
        scan->len -= len;
        break;
    }

    if ((data = vstr_cache_get(base, base->conf->cache_pos_cb_cstr)))
    {
      struct Vstr__cache_data_cstr *pdata = data;
      vstr_ref_del(pdata->ref);
      pdata->ref = (void *)0;
    }
    if (base->iovec_upto_date)
    {
      unsigned int num = 1 + VSTR__CACHE(base)->vec->off - 1;
      
      if (scan->type != VSTR_TYPE_NODE_NON)
      {
        char *tmp = VSTR__CACHE(base)->vec->v[num].iov_base;
        tmp += len;
        VSTR__CACHE(base)->vec->v[num].iov_base = tmp;
      }
      VSTR__CACHE(base)->vec->v[num].iov_len -= len;
    }
    if ((data = vstr_cache_get(base, base->conf->cache_pos_cb_pos)))
    {
      struct Vstr__cache_data_pos *pdata = data;
      pdata->node = (void *)0;
    }
    
    return (1);
  }

  return (vstr_extern_inline_del(base, pos, len));
}

extern inline int vstr_sects_add(struct Vstr_sects *sects,
                                 size_t pos, size_t len)
{
  if (!sects->sz || (sects->num >= sects->sz))
  {
    if (!sects->can_add_sz)
      return (0);
    
    if (!vstr_extern_inline_sects_add(sects, pos, len))
      return (0);
  }
  
  sects->ptr[sects->num].pos = pos;
  sects->ptr[sects->num].len = len;
  ++sects->num;
  
  return (1);
}

extern inline int vstr_add_rep_chr(struct Vstr_base *base, size_t pos,
                                   char chr, size_t len)
{ /* almost embarassingly similar to add_buf */
  if (!len) return (1);

  if (base->len && (pos == base->len) &&
      (base->end->type == VSTR_TYPE_NODE_BUF) &&
      (len <= (base->conf->buf_sz - base->end->len)) &&
      (!base->cache_available || base->cache_internal))
  {
    struct Vstr_node *scan = base->end;

    vstr_wrap_memset(((struct Vstr_node_buf *)scan)->buf + scan->len, chr, len);
    scan->len += len;
    base->len += len;

    if (base->iovec_upto_date)
    {
      unsigned int num = base->num + VSTR__CACHE(base)->vec->off - 1;
      VSTR__CACHE(base)->vec->v[num].iov_len += len;
    }
    
    return (1);
  }

  return (vstr_extern_inline_add_rep_chr(base, pos, chr, len));
}
