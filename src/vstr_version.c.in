#define VSTR_VERSION_C
/*
 *  Copyright (C) 1999, 2000, 2001, 2002  James Antill
 *  
 *  This library is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU Lesser General Public
 *  License as published by the Free Software Foundation; either
 *  version 2 of the License, or (at your option) any later version.
 *   
 *  This library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  Lesser General Public License for more details.
 *   
 *  You should have received a copy of the GNU Lesser General Public
 *  License along with this library; if not, write to the Free Software
 *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 *  email: james@and.org
 */

/* prints the version and some info out when you run the library */

#include "main.h"

void vstr_version_func(void)
{
  int fd = 1;
  const char *const msg = "\n"
       "Vstr library release version -- @VERSION@ --, by James Antill.\n"
       "Copyright (C) 1999, 2000, 2001, 2002 James Antill.\n"
       "This is free software; see the source for copying conditions.\n"
       "There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A\n"
       "PARTICULAR PURPOSE.\n\n"
       "Configured as follows:\n"
       "    Compiled on " __DATE__ " at " __TIME__ ".\n"

    
#ifndef NDEBUG
 "    Debugging enabled (CFLAGS = @CFLAGS@).\n"
#else
 "    No debugging (CFLAGS = @CFLAGS@)\n"
#endif

    
#if defined(VSTR_AUTOCONF_FMT_DBL_glibc)
 "    Formatting floats using -- glibc -- code.\n"
#elif defined(VSTR_AUTOCONF_FMT_DBL_none)
 "    Formatting floats using -- none -- code (all floats are treated as zero).\n"
#elif defined(VSTR_AUTOCONF_FMT_DBL_host)
 "    Formatting floats using -- host -- code.\n"
#else
# error "Please configure properly..."
#endif

    
#ifdef HAVE_LINKER_SCRIPT
 "    Linker script enabled (suppresses internal symbols).\n"
#endif

    
 "\n"
"Information can be found at:                          http://www.and.org/vstr/"
       "\n"
"Bug reports should be sent to:                    James Antill <james@and.org>"
       "\n\n"
    ;

#if defined(__linux__) && defined(__i386__)
  /* this is sick, but works. glibc doesn't seem to load properly if you
   * just run the shared lib. So this uses nothing from glibc. */
  const char *scan = msg;
  int len = 0;
  int ret = -1;
  
  while (*scan++) ++len;

  /* write syscall for Linux x86 */
  __asm__ __volatile__ ("\
mov     $4, %%eax\n\t\
mov     %1, %%ebx\n\t\
mov     %2, %%ecx\n\t\
mov     %3, %%edx\n\t\
int     $0x80\n\t\
" : "=a"(ret) : "m"(fd), "m"(msg), "m"(len));

  if (ret == len)
    ret = 0;
  else
    ret = 1;
  
  /* exit syscall for Linux x86 */
  __asm__ __volatile__ ("\
mov     $1, %%eax\n\t\
mov     %0, %%ebx\n\t\
int     $0x80\n\t\
" : : "m"(ret));

#else
  /* this is obvious, well apart from munging everything above into one string,
   * but can only be run via. ld.so */
 Vstr_base *str = NULL;

 vstr_init();

 str = vstr_make_base(NULL);
 if (!str)
   _exit (EXIT_FAILURE);

 VSTR_ADD_CSTR_PTR(str, 0, msg)

 while (str->len && vstr_sc_write_fd(str, 1, str->len, fd, NULL))
 { /* do nothing */; }

 vstr_free_base(str);

 vstr_exit();

 _exit (EXIT_SUCCESS);
#endif
}
