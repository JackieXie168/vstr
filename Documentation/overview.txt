   ABOUT

 This is a string library, it's designed so you can work optimally
with readv()/writev() for input/output.

   INTRODUCTION

 All functions are documented in functions.txt, all constants are
in constants.txt, all public members of structures are in structs.txt and the
namespace rules are in namespace.txt.

Basically you should be able to get an overview of a function by looking at
the functions.txt file, and be able to get a deeper understanding by looking
in the constants.txt file (Ie. all constants should be passed to a function
listed, so the more detailed information is listed with the constants -- not
the functions).


   A VERY SIMPLE OVERVIEW

 A very simple overview is that you call vstr_init() at the start of your
program then you can create a (Vstr_base *) by calling vstr_make_base().
 You can then add/delete data from this string, using the provided functions,
if you need to use all or part of the string with a "C string" interface
then you can call vstr_export_cstr_ptr() or vstr_export_cstr_ref().
 To delete the entire vstr you call vstr_free_base() on the (Vstr_base *).
