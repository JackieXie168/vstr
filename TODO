
 Note that some of these are almost certainly better off in seperate libraries.
Some are pretty high priority for the next stable version.
 I need a better priority ... but so far I've mainly been concerned with what
was needed for vstr-1.0.0

 During 1.0.x
 ------------

. Asserts in inline functions

. vstr_mov() doesn't move cache information.

. Make sure everything builds on different platforms.

. Get rid of inet_ntop() ?

. Try to find a way to test malloc() failure cases in testsuite ... last 17%
  XFAIL_TESTS

. wcrtomb() doesn't exist on FreeBSD ... relies on LC_CTYPE

. del() inline kills cache too easily ... make cb's extern inline and call
   directly.

 1.2.x
 -----

. utf-8 character class, utf-8 searching etc.

 Misc
 ----

. Vstr_ref->ptr non const. but possibly never altered, *sigh*

. _diamond ... al. la. perl

. Allocator - seperate library

. VSTR_FLAG_PARSE_NUM_LOC_SEP

. Add vstr_parse_double()/long_double()

. vstr_conv_canon_path() Ie. /foo/bar/../abcd -=> /foo/abcd

. _conv_sub_buf_buf() ? ...
   Ie. vstr_conv_sub_buf_buf(s1, 1, s1->len, "\t", 1, "    ", 4)

. http://burtleburtle.net/bob/hash/doobs.html .. vstr_x_hash ?
  vstr_x_hash_md5 vstr_x_hash_sha1

. vstr_x_pcre_*

. join ... ??

. _Bool ?

. {S...:%s} for chopped strings to replace end with "...".

. _conv_tr_buf_buf() ? ...
   Ie. vstr_conv_tr_buf_buf(s1, 1, s1->len, "\t\r", 2, " ?", 2)

. strftime() ?

. Fast inline parsing of ints when using certain flags.

. Add --with-libc=diet,host,klibc -- put into test framework.

. _SEF type ... like a _REF but you can do substitution on it when ref == 1,
  splitting the node changes behaviour here so probably not worth it *sigh*.
  Could do a copy when you move it to a different Vstr string, but that doesn't
 really do much more then _BUF nodes. Although you could convert _BUF nodes to
 it on a copy, which might be worth it.
  Could put a double indirect _ref in there ... with the _ref for the Vstr
 string and the second for all strings ... then allow subs if the second == 1.
   Will do "strange" things on mmap() read/write areas on _conv_ functions
  as it's not obvious what it should/could do on expantion.

. vstr_split_csv() ?

. vstr_add_fmt() internal cleanup to use struct blah {Vstr_fmt ... }

. ASN.1 (International Standard 8824)

. XDR ... rpc

. More locale related stuff, incl. vstr_loc_ functions for cmp/srch/etc.

. Max and Min ammounts for spare nodes.
  min = when allocating a node actually do MAX(1, min_ammount - cur_ammount)
  max = when deleting a node actually do MAX(cur_ammount - max_ammount, 1)

. vstr_conv_encode_qp (quoted printable rfc2045.txt)
. vstr_conv_encode_b64 (base64 rfc2045.txt)

